def TIMER = "H/30 * * * *"
def NODE = "atomic-jslave-autobrew"

// this var conveniently refers to a location on the server as well as the
// local dir we sync to/from
def rdgo = "/srv/rhcos/output/rdgo"

node(NODE) {
    docker.image(DOCKER_IMG).pull()

    checkout scm
    utils = load("pipeline-utils.groovy")
    utils.define_properties(TIMER)

    try {
        stage("Sync In") {
            withCredentials([
                string(credentialsId: params.ARTIFACT_SERVER, variable: 'ARTIFACT_SERVER'),
                sshUserPrivateKey(credentialsId: params.ARTIFACT_SSH_CREDS_ID, keyFileVariable: 'KEY_FILE'),
            ]) {
                utils.rsync_dir_in(ARTIFACT_SERVER, KEY_FILE, rdgo)
            }
        }

        stage("Build") {
	    sh "RDGO=${rdgo} WORKSPACE=${WORKSPACE} make stage1"
        }

        if (!fileExists("rdgo.stamp")) {
            currentBuild.result = 'SUCCESS'
            currentBuild.description = '(No changes)'
            return
        }

        if (params.DRY_RUN) {
            echo "DRY_RUN set, skipping push"
            currentBuild.result = 'SUCCESS'
            currentBuild.description = '(dry run)'
            return
        }

        stage("Sync Out") {
            withCredentials([
                string(credentialsId: params.ARTIFACT_SERVER, variable: 'ARTIFACT_SERVER'),
                sshUserPrivateKey(credentialsId: params.ARTIFACT_SSH_CREDS_ID, keyFileVariable: 'KEY_FILE'),
            ]) {
                utils.rsync_dir_out(ARTIFACT_SERVER, KEY_FILE, rdgo)
            }
            withCredentials([
                [$class: 'AmazonWebServicesCredentialsBinding', credentialsId: params.AWS_CREDENTIALS],
            ]) {
                sh "aws s3 sync --delete ${rdgo}/build/ s3://aos-ci/rhcos/rdgo"
            }
            currentBuild.description = 'rdgo build+sync done'
        }

        build job: 'coreos-rhcos-treecompose', wait: false
    }

    } finally {
        archiveArtifacts artifacts: "log/**", allowEmptyArchive: true
    }
}

